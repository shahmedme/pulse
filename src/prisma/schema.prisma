generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              Int         @id @default(autoincrement())
  firstName       String      @db.VarChar(50)
  lastName        String      @db.VarChar(50)
  username        String      @unique @db.VarChar(30)
  email           String      @unique
  emailVerifiedAt DateTime?
  password        String?
  image           String?
  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  communities     Community[] @relation("CommunityMembers")
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PostType {
  TEXT
  ARTICLE
  IMAGES
  LINK
  POLL
}

enum MediaType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
}

model Media {
  id        Int       @id @default(autoincrement())
  url       String
  type      MediaType
  postId    Int
  post      Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model PollOption {
  id        Int      @id @default(autoincrement())
  text      String
  votes     Int      @default(0)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Community {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  @db.Text
  slug        String   @unique
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  posts       Post[]   @relation("CommunityPosts")
  members     User[]   @relation("CommunityMembers")
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String?
  content     String?      @db.Text
  type        PostType
  media       Media[]
  pollOptions PollOption[]
  linkUrl     String?
  tags        String?      @db.Text
  authorId    Int
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  communities Community[]  @relation("CommunityPosts")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}
